(175-195)/sqrt(500)
9.4/sqrt(507)
qnorm(0.98)
qnorm(0.95)
pnorm(0.95)
pnorm(1.96)
qnorm
qnorm(95)
qnorm(0.95)
qnorm(0.99)
qnorm(0.025
)
qnorm(0.025)
qnorm(0.01)
((1500-300)/2.32)^2
(2.32*300/40)^2
qnorm(0.01)
(2.326*300/40)^2
(qnorm(0.98)*300/40)^2
(qnorm(0.01)*300/40)^2
4/17
qnorm(0.23)
qnorm(0.1)
qnorm(0.0.25)
qnorm(0.05)
qnorm(0.025)
qnorm(0.05)
l<-(1.64*4.31/6)
l
30.69-l
30.69+ll
30.69+l
-4.7+1.4
(qnorm(0.01)*300/40)^2
(qnorm(0.025)*300/25)^2
z=4/6
z
4.31/6
0.36-0.32/0.718
pnorm(0.085)
1-pnorm(0.085)
2*(1-pnorm(0.085))
0.3069-0.32/0.718
2*(1-pnorm(0.1388))
qnorm(1.82)
pnorm(1.82)
(415-500)/22
pnorm(3.86)
415-44
415+44
install.packages("moments")
help skewness
help skewness()
skewness()
library(moments)
skewness()
help skewness()
set.seed(1234)
skewness(rnorm(1000))
set.seed(1234)
skewness(rnorm(1000))
install.packages("e1071")
library(e0171)
a<-by(filtered_gss$agekdbrn,filtered_gss$incom16,skewness)
shapiro.test(x)
by(filtered_gss$agekdbrn,filtered_gss$incom16,sd)
by(filtered_gss$agekdbrn,filtered_gss$incom16,sd)
2- Near normality. As we have seen in the exploratory analysis distributions are skewed because of bilogical reasons. We have measured skewness and kurtosis for each group and the results for skewness and kurtosis are moderate, less than 2.0 for both parameters. (See http://www.basic.northwestern.edu/statguidefiles/oneway_anova_ass_viol.html or Dr. Ã‡etinkaya-Rundel's advice on thread https://class.coursera.org/statistics-001/forum/thread?thread_id=1881). Besides, distributions are quite balanced and the number the samples is in the order of thousands. Under these circumstances we can assume that they fulfill the near normality condition.
source('D:/disco_usuario/proyectos/GLOD/KDAF/analisis/analisis_tiempos_kdaf.R')
load(url("http://bit.ly/dasi_gss_data"))
filtered_gss <- gss[!is.na(gss$agekdbrn) & !is.na(gss$incom16),]
filtered_gss <- filtered_gss[filtered_gss$incom16!="Lived In Institution",]
filtered_gss$incom16<-droplevels(filtered_gss$incom16)
levels(filtered_gss$incom16) <- c(levels(filtered_gss$incom16), "Above or Far Above Average")
filtered_gss$incom16[ filtered_gss$incom16 == "Above Average"] <- "Above or Far Above Average"
filtered_gss$incom16[filtered_gss$incom16 == "Far Above Average"] <- "Above or Far Above Average"
filtered_gss$incom16<-droplevels(filtered_gss$incom16)
by(filtered_gss$agekdbrn,filtered_gss$incom16,sd)
a<-by(filtered_gss$agekdbrn,filtered_gss$incom16,sd)
a
a[1]
a[[1]]
a[[2]]
a[[3]]
a[[4]]
a<-by(filtered_gss$agekdbrn,filtered_gss$incom16,sd)
devs <- by(filtered_gss$agekdbrn,filtered_gss$incom16,sd)
nums <- by(filtered_gss$agekdbrn,filtered_gss$incom16,nrow)
devs
nums[[1]]
nums
devs
unms
nums
nums <- by(filtered_gss$agekdbrn,filtered_gss$incom16,nrows)
nums <- by(filtered_gss$agekdbrn,filtered_gss$incom16,nrow)
nums
nums <- by(filtered_gss,filtered_gss$incom16,nrow)
nums
nums(1)
nums[[1]]
nums[1]
nums[1]
for i in levels(filtered_gss$incom16) {print(i)}
for i in levels(filtered_gss$incom16)
levels(filtered_gss$incom16)
for (i in levels(filtered_gss$incom16))
print(i)
for (i in levels(filtered_gss$incom16)) {print (i),nums[[i]]}
for (i in levels(filtered_gss$incom16)) {print (i,nums[[i]])}
for (i in levels(filtered_gss$incom16)) {print (i,nums[[i]])}
levels(filtered_gss$incom16)[1]
for (i in 1:4) {print (levels(filtered_gss$incom16)[i],nums[[i]])}
for (i in 1:4) {print (levels(filtered_gss$incom16)[i])}
for (i in 1:4) {print (levels(filtered_gss$incom16)[i]),nums[i]}
for (i in 1:4) {print (levels(filtered_gss$incom16)[i]),nums[i])}
for (i in 1:4) {print (levels(filtered_gss$incom16)[i],nums[i])}
for (i in 1:4) {print (levels(filtered_gss$incom16)[i],nums[[i]])}
for (i in 1:4) {print (nums[[i]])}
for (i in 1:4) {print (levels(filtered_gss$incom16)[i])}
for (i in 1:4) {
clase <- levels(filtered_gss$incom16)[i]
print("Group: %s\tNumber of samples: %d\td. deviatoin:%0.1f (years)",clase,nums[[i]],devs[[i]])
}
i<-1
print("Group: %s\tNumber of samples: %d\t sd. deviation:%0.1f (years)",clase,nums[[i]],devs[[i]])
print("Group: %s",clase)
print("Group: %s",levels(filtered_gss$incom16)[i])
print("Group: %s",levels(filtered_gss$incom16)[i])
levels(filtered_gss$incom16)[i]
class(levels(filtered_gss$incom16)[i])
print("Group: %s",levels(filtered_gss$incom16)[i])
print("Group: %s",levels(filtered_gss$incom16)[1])
print("Group: %s",levels(filtered_gss$incom16)[[1]])
print("Group: %s",levels(filtered_gss$incom16)[1])
sprint("Group: %s",levels(filtered_gss$incom16)[1])
sprintf("Group: %s",levels(filtered_gss$incom16)[1])
sprintf("Group: %s",levels(filtered_gss$incom16)[1])
print(sprintf("Group: %s\tNumber of samples: %d\t sd. deviation:%0.1f \(years\)",clase,nums[[i]],devs[[i]]))
print(sprintf("Group: %s\tNumber of samples: %d\t sd. deviation:%0.1f (years)",clase,nums[[i]],devs[[i]]))
print(sprintf("Group: %s \t Number of samples: %d\t sd. deviation:%0.1f (years)",clase,nums[[i]],devs[[i]]))
print(sprintf("Group: %s Number of samples: %d sd. deviation:%0.1f (years)",clase,nums[[i]],devs[[i]]))
print(sprintf("Group: %s | Number of samples: %d | Sd. deviation:%0.1f (years)",clase,nums[[i]],devs[[i]]))
for (i in 1:4) {
clase <- levels(filtered_gss$incom16)[i]
print(sprintf("Group: %s | Number of samples: %d | Sd. deviation:%0.1f (years)",clase,nums[[i]],devs[[i]]))
}
for (i in 1:4) {
clase <- levels(filtered_gss$incom16)[i]
print(sprintf("Group: %s | Number of samples: %d | Sd. deviation:%0.1f (years)",clase,nums[[i]],devs[[i]]) )
}
class(nums[[i]])
class(devs[[i]])
devs
nums
class(nums[[1]])
sprintf("%d",nums[[1]])
nums[1]
nums[1][1]
nums[1][2]
nums[1]
class(nums)
as.vector(nums)
as.vector(nums)[1]
nums <- as.vector(by(filtered_gss$agekdbrn,filtered_gss$incom16,nrow))
nums
nums <- by(filtered_gss$agekdbrn,filtered_gss$incom16,nrow)
nums
nums <- by(filtered_gss$agekdbrn,filtered_gss$incom16,nrow)
nums
nums <- by(filtered_gss,filtered_gss$incom16,nrow)
nums
desvs <- by(filtered_gss,filtered_gss$incom16,sd)
desvs <- by(filtered_gss,filtered_gss$incom16,sd)
desvs <- by(filtered_gss,as.numeric(filtered_gss$incom16),sd)
desvs <- by(filtered_gss,filtered_gss$incom16,sd)
desvs <- by(filtered_gss$agekdbrn,filtered_gss$incom16,sd)
desvs
max(devs)
max(devs)/min(devs)
min(devs)/max(devs)
p.aov
p.aov <- aov(filtered_gss$agekdbrn ~ filtered_gss$incom16, filtered_gss)
p.aov
summay(p.aov)
summary(p.aov)
summary(p.aov)
pairwise.t.test(filtered_gss$agekdbrn, filtered_gss$incom16, p.adj = "bonf")
pairwise.t.test(filtered_gss$agekdbrn, filtered_gss$incom16, p.adj = "bonf")
ss<-pairwise.t.test(filtered_gss$agekdbrn, filtered_gss$incom16, p.adj = "bonf")
ss
summary(ss)
ry=0.08
(0.08/365)-1
exp(0.08/365)-1
(0.08/365)-1
exp(0.08/365)-1
ry = 0.08
rd = exp(ry/365)-1
(1-rd)^365
1-(1-rd)^365
ry
rd=(ry/365)-1
rd
rd=exp(log(1+ry)/365)-1
rd
(1+rd)^365
rd=exp(log(1+ry)/365)-1
(1+rd)^365-1
ry
rd=(1+ry)^1/365 - 1
rd
1.08^1/365
(1.08)^1/365
-1+(1.08)^1/365
rd=(1+ry)^1/365 - 1
rd
rd=(1+ry)^(1/365)
rd
rd=(1+ry)^(1/365)-1
rd
10^-4
10^-4*500
0.1-0.05
source('D:/moocs/coursera/spec_data_analysis/getting_and_cleaning_data/quizz2/quizz2.R')
source('D:/moocs/coursera/spec_data_analysis/getting_and_cleaning_data/quizz2/quizz2.R')
library(jsonlite)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
source('D:/moocs/coursera/spec_data_analysis/getting_and_cleaning_data/quizz2/quizz2.R')
library(jsonlite)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
jsonData
names(jsonData)
install.packages("httr")
source('D:/moocs/coursera/spec_data_analysis/getting_and_cleaning_data/quizz2/quizz2.R')
source('D:/moocs/coursera/spec_data_analysis/getting_and_cleaning_data/quizz2/quizz2.R')
source('D:/moocs/coursera/spec_data_analysis/getting_and_cleaning_data/quizz2/quizz2.R')
source('D:/moocs/coursera/spec_data_analysis/getting_and_cleaning_data/quizz2/quizz2.R')
source('D:/moocs/coursera/spec_data_analysis/getting_and_cleaning_data/quizz2/quizz2.R')
library(jsonLite)
jsonData <- fromJSON("https://github.com/jtleek/datasharing")
source('D:/moocs/coursera/spec_data_analysis/getting_and_cleaning_data/quizz2/quizz2.R')
source('D:/moocs/coursera/spec_data_analysis/getting_and_cleaning_data/quizz2/quizz2.R')
source('D:/moocs/coursera/spec_data_analysis/getting_and_cleaning_data/quizz2/quizz2.R')
source('D:/moocs/coursera/spec_data_analysis/getting_and_cleaning_data/quizz2/quizz2.R')
source('D:/moocs/coursera/spec_data_analysis/getting_and_cleaning_data/quizz2/quizz2.R')
?fromJSON
source('D:/moocs/coursera/spec_data_analysis/getting_and_cleaning_data/quizz2/quizz2.R')
source('D:/moocs/coursera/spec_data_analysis/getting_and_cleaning_data/quizz2/quizz2.R')
source('D:/moocs/coursera/spec_data_analysis/getting_and_cleaning_data/quizz2/quizz2.R')
source('D:/moocs/coursera/spec_data_analysis/getting_and_cleaning_data/quizz2/quizz2.R')
source('D:/moocs/coursera/spec_data_analysis/getting_and_cleaning_data/quizz2/quizz2.R')
source('D:/moocs/coursera/spec_data_analysis/getting_and_cleaning_data/quizz2/quizz2.R')
source('D:/moocs/coursera/spec_data_analysis/getting_and_cleaning_data/quizz2/quizz2.R')
source('D:/moocs/coursera/spec_data_analysis/getting_and_cleaning_data/quizz2/quizz2.R')
source('D:/moocs/coursera/spec_data_analysis/getting_and_cleaning_data/quizz2/quizz2.R')
jsonData$name
jsonData$name==datasharing
jsonData$name=='datasharing'
jsonData[jsonData$name=='datasharing']
str(jsonData)
head(jsonData)
jsonData[[1]]
jsonData[[3]]
jsonData[[3]][1]
jsonData[[3]][2]
source('D:/moocs/coursera/spec_data_analysis/getting_and_cleaning_data/quizz2/quizz2.R')
library(jsonlite)
jsonData <- fromJSON("https://api.github.com/users/jtleek/repos")
json2 = jsonlite::fromJSON(toJSON(jsonData))
json2
heads(json2)
head(json2)
head(json2)
names(json2)
jsonData
subset(jsonData,jsonData$name=='datasharing')
koko<-subset(jsonData,jsonData$name=='datasharing')
names(koko)
koko$created_at
source('D:/moocs/coursera/spec_data_analysis/getting_and_cleaning_data/quizz2/quizz2.R')
source('D:/moocs/coursera/spec_data_analysis/getting_and_cleaning_data/quizz2/quizz2_html.R')
setwd("D:/moocs/coursera/spec_data_analysis/exploratory_data_Analysis/project2/ExplData_pm25_project")
source('D:/moocs/coursera/spec_data_analysis/exploratory_data_Analysis/project2/ExplData_pm25_project/Plot3.R')
png(file = "Plot3.png", width = 1000, height = 480, bg = "transparent")
gr <-ggplot(data_frame_sums,aes(x=Year, y= Emissions, group = Type, colour=Type))
gr <- gr + geom_line(size=1) + geom_point() + ylab("PM_2.5 (tons)") + ggtitle("Total PM_2.5 yearly emissions")
gr <- gr + geom_text(data = data_frame_sums, aes(label = round(Emissions,2)), hjust = 0,vjust = 1)
print(gr)
dev.off()
png(file = "Plot3.png", width = 1000, height = 480, bg = "transparent")
gr <-ggplot(data_frame_sums,aes(x=Year, y= Emissions, group = Type, colour=Type))
gr <- gr + geom_line(size=1) + geom_point() + ylab("PM_2.5 (tons)") + ggtitle("Total PM_2.5 yearly emissions")
gr <- gr + geom_text(data = data_frame_sums, aes(label = round(Emissions,2)), hjust = 0,vjust = 3)
print(gr)
dev.off()
png(file = "Plot3.png", width = 1000, height = 480, bg = "transparent")
gr <-ggplot(data_frame_sums,aes(x=Year, y= Emissions, group = Type, colour=Type))
gr <- gr + geom_line(size=1) + geom_point() + ylab("PM_2.5 (tons)") + ggtitle("Total PM_2.5 yearly emissions")
gr <- gr + geom_text(data = data_frame_sums, aes(label = round(Emissions,2)), hjust = 0,vjust =-1)
print(gr)
dev.off()
source('D:/moocs/coursera/spec_data_analysis/exploratory_data_Analysis/project2/ExplData_pm25_project/Plot3.R')
png(file = "Plot3.png", width = 1000, height = 600, bg = "transparent")
gr <-ggplot(data_frame_sums,aes(x=Year, y= Emissions, group = Type, colour=Type))
gr <- gr + geom_line(size=1) + geom_point() + ylab("PM_2.5 (tons)") + ggtitle("Total PM_2.5 yearly emissions")
gr <- gr + geom_text(data = data_frame_sums[data_frame_sums$Year>1999,], aes(label = round(Emissions,2)), hjust = 0,vjust =-1)
print(gr)
dev.off()
data_frame_sums[data_frame_sums$Year>1999,]
data_frame_sums
data_frame_sums$Year
data_frame_sums$Year>1999
data_frame_sums$Year!="1999"
# Open the graphic device
png(file = "Plot3.png", width = 1000, height = 600, bg = "transparent")
gr <-ggplot(data_frame_sums,aes(x=Year, y= Emissions, group = Type, colour=Type))
gr <- gr + geom_line(size=1) + geom_point() + ylab("PM_2.5 (tons)") + ggtitle("Total PM_2.5 yearly emissions")
gr <- gr + geom_text(data = data_frame_sums[data_frame_sums$Year!="1999",], aes(label = round(Emissions,2)), hjust = 0,vjust =-1)
print(gr)
dev.off()
# Open the graphic device
png(file = "Plot3.png", width = 1000, height = 600, bg = "transparent")
gr <-ggplot(data_frame_sums,aes(x=Year, y= Emissions, group = Type, colour=Type))
gr <- gr + geom_line(size=1) + geom_point() + ylab("PM_2.5 (tons)") + ggtitle("Total PM_2.5 yearly emissions")
gr <- gr + geom_text(data = data_frame_sums[data_frame_sums=="1999",], aes(label = round(Emissions,2)), hjust = 1,vjust =-1)
gr <- gr + geom_text(data = data_frame_sums[data_frame_sums$Year!="1999",], aes(label = round(Emissions,2)), hjust = 0,vjust =-1)
print(gr)
# Open the graphic device
png(file = "Plot3.png", width = 1000, height = 600, bg = "transparent")
gr <-ggplot(data_frame_sums,aes(x=Year, y= Emissions, group = Type, colour=Type))
gr <- gr + geom_line(size=1) + geom_point() + ylab("PM_2.5 (tons)") + ggtitle("Total PM_2.5 yearly emissions")
gr <- gr + geom_text(data = data_frame_sums[data_frame_sums$Year=="1999",], aes(label = round(Emissions,2)), hjust = 1,vjust =-1)
gr <- gr + geom_text(data = data_frame_sums[data_frame_sums$Year!="1999",], aes(label = round(Emissions,2)), hjust = 0,vjust =-1)
print(gr)
